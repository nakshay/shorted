// Code generated by MockGen. DO NOT EDIT.
// Source: ./redirect_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	shorted_error "shorted/shorted_error"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockRedirectService is a mock of RedirectService interface.
type MockRedirectService struct {
	ctrl     *gomock.Controller
	recorder *MockRedirectServiceMockRecorder
}

// MockRedirectServiceMockRecorder is the mock recorder for MockRedirectService.
type MockRedirectServiceMockRecorder struct {
	mock *MockRedirectService
}

// NewMockRedirectService creates a new mock instance.
func NewMockRedirectService(ctrl *gomock.Controller) *MockRedirectService {
	mock := &MockRedirectService{ctrl: ctrl}
	mock.recorder = &MockRedirectServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedirectService) EXPECT() *MockRedirectServiceMockRecorder {
	return m.recorder
}

// GetFullURL mocks base method.
func (m *MockRedirectService) GetFullURL(ctx *gin.Context, url string) (string, *shorted_error.ShortedError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFullURL", ctx, url)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*shorted_error.ShortedError)
	return ret0, ret1
}

// GetFullURL indicates an expected call of GetFullURL.
func (mr *MockRedirectServiceMockRecorder) GetFullURL(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFullURL", reflect.TypeOf((*MockRedirectService)(nil).GetFullURL), ctx, url)
}
