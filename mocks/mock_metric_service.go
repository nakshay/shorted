// Code generated by MockGen. DO NOT EDIT.
// Source: ./metrics_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	model "shorted/model"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockMetricsService is a mock of MetricsService interface.
type MockMetricsService struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsServiceMockRecorder
}

// MockMetricsServiceMockRecorder is the mock recorder for MockMetricsService.
type MockMetricsServiceMockRecorder struct {
	mock *MockMetricsService
}

// NewMockMetricsService creates a new mock instance.
func NewMockMetricsService(ctrl *gomock.Controller) *MockMetricsService {
	mock := &MockMetricsService{ctrl: ctrl}
	mock.recorder = &MockMetricsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsService) EXPECT() *MockMetricsServiceMockRecorder {
	return m.recorder
}

// GetMetrics mocks base method.
func (m *MockMetricsService) GetMetrics(ctx *gin.Context, topNDomains int) model.MetricsResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetrics", ctx, topNDomains)
	ret0, _ := ret[0].(model.MetricsResponse)
	return ret0
}

// GetMetrics indicates an expected call of GetMetrics.
func (mr *MockMetricsServiceMockRecorder) GetMetrics(ctx, topNDomains interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockMetricsService)(nil).GetMetrics), ctx, topNDomains)
}
